--    Â¥
--[[
ARgS:
1 - "nosplash" for no splash
2 - The program to run after bootup
3 - "nopass" to bypass the password. Note that there is no way you can get the boot function to do this before entering the password. The password lock is completely safe.
4 - "stop" will cause Newshell to ceise to initialize.
]]
--config:

--aliases
shell.setAlias("clear","/library/newClear")
shell.setAlias("wipe","/library/wipe")
shell.setAlias("settings","/library/settings")
shell.setAlias("lock","/library/pswd")
shell.setAlias("edit","/library/nevardon")
shell.setAlias("oldEdit","/rom/programs/edit")
shell.setAlias("bg","/library/bg")
shell.setAlias("fg","/library/fg")
shell.setAlias("dir","/library/dir")
shell.setAlias("list","/library/dir")
shell.setAlias("ls","/library/dir")
shell.setAlias("clr","/library/newClear")
--force shell.programs to include our aliases
local a = shell.programs
function shell.programs(...)
  local b = a(...)
  b[#b+1] = "wipe"
  b[#b+1] = "settings"
  b[#b+1] = "lock"
  b[#b+1] = "oldEdit"
  b[#b+1] = "startx"
  b[#b+1] = "console"
  return b
end
local args={...}
local pastCommands={}
local tEnv = {}
tEnv["shell"] = shell--accsess to shell
tEnv["osStuff"] = osStuff --accsess to osStuffS
function osStuff.doMain()
  osStuff.doDir()
  --read input
  term.setBackgroundColor(osStuff.backColor or 1)
  term.setTextColor(osStuff.textColor or 1)
  input = read(nil,pastCommands)
  --add this to prev commands
  if string.find(input,"%a") or string.find(input,"%d") then 
    pastCommands[#pastCommands+1]=input
  end
  --sub the first part of the string out
  local inFirstChar = string.sub(input,1,1) -- This section in need of recode
  if inFirstChar ~=";" and inFirstChar~=":" then
    --top priority: make it look cool, of course!
    local _,y=term.getCursorPos()
    term.setCursorPos(1,y-1)
    osStuff.doDir()
    term.setTextColor(osStuff.commandColor or 1)
    --write(inFirstChar)
    term.setTextColor(osStuff.textColor or 1)
    --kindly done for me:
    --input=string.sub(input,2,#input)
    --write(input)
    print() --move back to normal line
    --[[if input =="clear" then
      local runThis = loadfile"library/newClear"
      runThis()
    elseif input=="wipe"then
      local runThis=loadfile"library/wipe"
      runThis()
    elseif input=="settings"then
    
      local runThis=loadfile"library/settings"
      runThis=osStuff.giveFenv(runThis)
      runThis()
    else
      
    end]]
    if input == "console" then 
      game.openConsole()
    elseif input == "startx" then 
      if term.isColor() then 
        --start the GUI 
      else 
        print"The GUI is not supported on basic computers."
      end
    else 
      local ok,err=pcall(function() shell.run(input) end)
      if not ok then 
        print('[os MSG] - There was an error running the program "'..input..'". The error was: '..err)
      end 
      -- Reset background colors: 
      term.setBackgroundColor(osStuff.backColor)
      term.setTextColor(osStuff.commandColor)
    end
  else
    local inputF
    --they're running a lua command
    local _,y=term.getCursorPos()
    term.setCursorPos(1,y-1)
    osStuff.doDir()
    term.setTextColor(osStuff.promptColor or 1)
    term.setTextColor(osStuff.commandColor or 1)
    write(inFirstChar)
    term.setTextColor(osStuff.textColor or 1)
    input=string.sub(input,2,#input)
    print(input)
    --make it into a command:
    inputF,err= loadstring("return "..input)
    if err then 
      game.l"noReturn"
      game.l(type(inputF))
      inputF,err=loadstring(input)
    end
    --set its envirnment
    setfenv(inputF,tEnv)
    --call it
    game.l(inputF)
    game.l(err)
    game.l("f"..type(inputF))
    inputF()
    if type(inputF)=="function" then 
      local ok,err=pcall(inputF)
      inputF()
      game.l"yes"
      game.l(ok)
      game.l(err)
    else 
      print(err)
    end
    
    if not ok and err then
      --first let's check if it's a variablef
      local varF=loadstring("return "..input.."")
      setfenv(varF, tEnv)
      local var,errr=pcall(varF)
     -- printError("Your command had this error: \n"..err.."\nIf you want to run a program, put ; infront.")
      --could be a variable, etc.
      --check if it;s a table
      if type(var)=="table" then
        local okay,er = pcall(textutils.serialize, err)
        if okay then--did work
          print(er)
        else
          print(tostring(err))
        end
      else
        print(tostring(err))
      end
    end
  end
end
if args[4]~="stop" then 
  osStuff.int()
end
