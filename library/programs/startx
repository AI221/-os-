--[[
This is the GUI--it's launched when you type startx.

You might be a little confused how this is just a menubar and a desktop. The simple answer is that routine handling is 
already done by the main script.








]]
term.clear()
term.setCursorPos(1,1)
local arr = {}
local function clScrn() 
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
	local str = ""
	local x,y = term.getSize()
	for i=1,x do 
		str=str.." "
	end 
	for i=1,y-1 do 
		term.setCursorPos(1,i+1)
		game.l(i+1)
		write(str)
	end 
	term.setCursorPos(1,1)
end 
local function refrshDeskBack()
	--[[Brief:
	Load where their image is,
	render.
	]]
	--temp:
	term.setBackgroundColor(colors.blue)
	term.clear()
end 
local function renderIcons()
	local stuff = fs.list("desktop/")
	--game.l"ALIVE"
	for i=1,table.maxn(stuff) do 
		--temporary render
		--game.l(stuff[i])
		if stuff[i]~=".arrange" then 
			term.setBackgroundColor(colors.black)
			term.setTextColor(colors.white)
			arr[stuff[i]] = arr[stuff[i]] or {}
			arr[stuff[i]].x = arr[stuff[i]].x or 1
			arr[stuff[i]].y = arr[stuff[i]].y or 1
			local icn = game.loadMapOld(fs.combine(fs.combine("desktop/",stuff[i]),"iconOld"), 0, 0,colors.white,colors.black,"?",4,4)
			icn.render.blit(1,1,arr[stuff[i]].x,arr[stuff[i]].y)
			--[[
			term.setCursorPos(arr[stuff[i] ].x,arr[stuff[i] ].y)
			write"ICON"
			term.setCursorPos(arr[stuff[i] ].x,arr[stuff[i] ].y+1)
			write"ICON"
			term.setCursorPos(arr[stuff[i] ].x,arr[stuff[i] ].y+2)
			write"ICON"
			term.setCursorPos(arr[stuff[i] ].x,arr[stuff[i] ].y+3)
			write"ICON"]]
			--load the image 
		end 
	end 
end 
local function saveArrange()
	local f = fs.open("desktop/.arrange","w")
	if not f then game.e"Couldn't open desktop/.arrange!" return false end 
	local ser 
	ser = textutils.serialize(arr)
	if not ser then game.e"Failed to serialize arrangement!" end 
	f.write(ser)
	f.close()
end 
local function loadArrange()
	local f = fs.open("desktop/.arrange","r")
	if not f then game.e"Couldn't open desktop/.arrange!" return false end 
	local ser 
	ser=f.readAll()
	ser = textutils.unserialize(ser)
	if not ser then game.e"Failed to serialize arrangement!" end 
	f.close()
	arr=ser
end 
--Desktop
local function desktop() 
	term.setCursorBlink(false)
	loadArrange()
	refrshDeskBack()
	renderIcons()
	saveArrange()
	local pressing,dragged
	while true do
		local evts = {coroutine.yield()}
		--game.l(textutils.serialize(evts))
		--game.l"cy"
		if evts[1] == "mouse_click" then --3  = x | 4 = y 
			game.l"click"
			term.setBackgroundColor(colors.black)
			for i,o in pairs(arr) do 
				if arr[i].x <= evts[3] then 
					if arr[i].y <= evts[4] then 
						if arr[i].x+4 >= evts[3] then 
							if arr[i].y+4>= evts[4] then 
								pressing = i
							end 
						end 
					end 
				end 
			end 
		elseif evts[1] == "mouse_drag" and pressing then 
			arr[pressing].x=evts[3]
			arr[pressing].y=evts[4]
			refrshDeskBack()
			renderIcons()
			dragged=true 
		elseif evts[1] == "mouse_up" and pressing then 
			if dragged then 
				dragged = false
				saveArrange()
			else 
				game.l(" launch "..tostring(pressing))
				
				local prg = loadfile(fs.combine("desktop",fs.combine(pressing,"main.lua")))
				if prg then 
					osStuff.spawnApp(pressing,prg,colors.lightGray,colors.black,"T")
				else 
					game.e("Missing main.lua in desktop program "..pressing)
				end  
			end 
			pressing=false
		end 
	end 
end 
local function tmp() while true do osStuff.doMain() end end 
--desktop()
osStuff.spawnApp("desktop",desktop,colors.blue,colors.gray,"D")--inb4 joke is made about this...

--Menubar stuff:

--[[Menubar functionality:
-Update tasks everytime "appSpawned" event
-Update menu everytime "menu_update"
-Send "menu_press" events when stuff on menu clicked

]]
local props,ori = osStuff.returnTaskstuffs()
local mY = 1
local tsks

local function refreshTasks() --todo: make a cutoff of the ammount of tasks displayed
	local ox,oy = term.getCursorPos()
	local o,cpos = nil,5-osStuff.settings.taskSpace--space of 4 between os bar
	tsks = {}
	for i=1,table.maxn(ori) do 
		o=ori[i]
		cpos=cpos+osStuff.settings.taskSpace
		--[[term.setCursorPos(cpos,mY)
		term.setBackgroundColor(props[o].taskBackColor)
		term.setTextColor(props[o].taskTextColor)
		term.write(string.sub(props[o].taskText,1,1)) --string.sub prevents abuse]]
		game.addButton(string.sub(props[o].taskText,1,1),cpos,mY,props[o].taskBackColor,props[o].taskTextColor,tsks)
	end 
	game.drawButtons(tsks)
	term.setCursorPos(ox,oy)
end 
local function refreshMisc()
	local ox,oy = term.getCursorPos()
	term.setCursorPos(1,mY)
	term.setTextColor(osStuff.settings.gc.menuTColor)
	term.setBackgroundColor(osStuff.settings.gc.menuBColor)
	term.write"OS"
	term.setCursorPos(ox,oy)
end 
local function refreshClock()
	local ox,oy = term.getCursorPos()
	local x,y = term.getSize()
	term.setCursorPos(x-9,mY)	
	term.setBackgroundColor(osStuff.settings.gc.menuBColor)
	term.setTextColor(osStuff.settings.gc.menuTColor)
	local year,month,day,clocktime,pm = osStuff.getTime()
	if clocktime:sub(2,2) == ":" then 
		term.write" "
	end 
	if osStuff.settings.shortClock then 
		term.write("   "..clocktime:sub(1,5))
	else 
		term.write(clocktime:sub(1,8))
	end 
	term.setCursorPos(x-1,mY)
	if pm then 
		term.write"PM"
	else 
		term.write"AM"
	end 
	term.setCursorPos(ox,oy)
end 
local function refreshDrpDwns() 
	local ox,oy = term.getCursorPos()

	term.setCursorPos(ox,oy)
end 
local function refreshMenu()
	refreshMisc()
	--while our colors are set,
	term.setCursorPos(3,1)
	for i=1,term.getSize()-2 do 
		term.write" "
	end 
	refreshTasks()
	refreshClock()
	refreshDrpDwns()
end
local function resetColors()
	local buf = omni.getOriBuffer(omni.returnLegacyActive())
	term.setBackgroundColor(buf.bg)
	term.setTextColor(buf.tc)
end 
local function menu()
	sleep(0)
	refreshMenu()
	while true do 
		local evt = {coroutine.yield()}
		if evt[1] == "clocktick" then 
			refreshClock()
			resetColors()
		elseif evt[1] == "appSpawned" then 
			--we have to update the menu due it needing to move
			refreshTasks()
			refreshDrpDwns()
			resetColors()
		elseif evt[1] == "menu_update" then 
			refreshDrpDwns()
			resetColors()
		elseif evt[1] == "key" then 
			--osStuff.spawnApp("app",function() while true do sleep(0) end end, colors.black,colors.white,"a")
		end
		local _,pressed = game.checkButtons(tsks,evt)
		if pressed then 
			clScrn()
			game.l("~~ "..pressed.." + "..ori[pressed])
			omni.legacyMakeActive(ori[pressed])
			local buf = omni.getOriBuffer(omni.returnLegacyActive())
			refreshMenu()
			resetColors()
			term.setCursorPos(buf.x+buf.pX-1,buf.y+buf.pY-1)
		end 
		--term.setCursorPos(1,2) write"               " term.setCursorPos(1,2) write(evt[1])
	end 


end 
osStuff.newDaemon(menu,"menu")
omni.makeActive("menud")
omni.legacyMakeActive("desktopApp")
--shell.run'spwnR'
while true do coroutine.yield() end --hang the term

























































































--[[local function menu()

while true do coroutine.yield() end 
end	
local function test()
		pcall(loadfile("rom/programs/lua"))

	pcall(loadfile("rom/programs/fun/advanced/paint"),"sdftrghjkl")
	while true do 
		write"a"
		sleep(1)
	end 
end 

if not omni.newRoutine("main",menu,false) then 
	printError"WARNING - 'main' routine already exists. Consider checking your computer for viruses."
end 
term.clear()
term.setCursorPos(1,1)
omni.newRoutine("test",test,true,51,19)
omni.makeRoutineActive("test",1,1)
omni.initRoutines()
]]
