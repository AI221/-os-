--[[
This is the GUI--it's launched when you type startx.

You might be a little confused how this is just a menubar and a desktop. The simple answer is that routine handling is 
already done by the main script.








]]

local function clScrn() 
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
	local str = ""
	local x,y = term.getSize()
	for i=1,x do 
		str=str.." "
	end 
	for i=1,y-1 do 
		term.setCursorPos(1,i+1)
		--game.l(i+1)
		write(str)
	end 
	term.setCursorPos(1,1)
end 
local props,ori = osStuff.returnTaskstuffs()
local mY = 1
local tsks

local function refreshTasks() --todo: make a cutoff of the ammount of tasks displayed
	local ox,oy = term.getCursorPos()
	local o,cpos = nil,5-osStuff.settings.taskSpace--space of 4 between os bar
	tsks = {}
	for i=1,table.maxn(ori) do 

		o=ori[i]
		game.l("tas"..o)
		cpos=cpos+osStuff.settings.taskSpace
		--[[term.setCursorPos(cpos,mY)
		term.setBackgroundColor(props[o].taskBackColor)
		term.setTextColor(props[o].taskTextColor)
		term.write(string.sub(props[o].taskText,1,1)) --string.sub prevents abuse]]
		game.addButton(string.sub(props[o].taskText,1,1),cpos,mY,props[o].taskBackColor,props[o].taskTextColor,tsks)
	end 
	game.drawButtons(tsks)
	term.setCursorPos(ox,oy)
end 
local function refreshMisc()
	local ox,oy = term.getCursorPos()
	term.setCursorPos(1,mY)
	term.setTextColor(osStuff.settings.gc.tColor)
	term.setBackgroundColor(osStuff.settings.gc.mColor)
	term.write"OS"
	term.setCursorPos(ox,oy)
end 
local function refreshClock()
	local ox,oy = term.getCursorPos()
	local x,y = term.getSize()
	term.setCursorPos(x-9,mY)	
	term.setBackgroundColor(osStuff.settings.gc.mColor)
	term.setTextColor(osStuff.settings.gc.tColor)
	local year,month,day,clocktime,pm = osStuff.getTime()
	if (clocktime or ""):sub(2,2) == ":" then 
		term.write" "
	end 
	if osStuff.settings.shortClock then 
		term.write("   "..(clocktime or "SrDwn"):sub(1,5))
	else 
		term.write((clocktime or "ServDown"):sub(1,8))
	end 
	term.setCursorPos(x-1,mY)
	if pm then 
		term.write"PM"
	else 
		term.write"AM"
	end 
	term.setCursorPos(ox,oy)
end 
local function refreshDrpDwns() 
	local ox,oy = term.getCursorPos()

	term.setCursorPos(ox,oy)
end 

local function resetColors()
	local buf = osStuff.getOriBuffer(osStuff.returnLegacyActive())
	term.setBackgroundColor((buf or {}).bg or 1)
	term.setTextColor((buf or {}).tc or 1 )
	local buf = osStuff.getOriBuffer(osStuff.returnLegacyActive())
	buf = buf or {}
	term.setCursorPos((buf.x or 1)+(buf.pX or 1)-1,(buf.y or 1)+(buf.pY or 1)-1)
end 
local function refreshMenu()
	refreshMisc()
	--while our colors are set,
	term.setCursorPos(3,1)
	for i=1,term.getSize()-2 do 
		term.write" "
	end 
	refreshTasks()
	refreshClock()
	refreshDrpDwns()
	resetColors()
end
local function act()
	local buf = osStuff.getOriBuffer(osStuff.returnLegacyActive())
	refreshMenu()
	if buf then 
		resetColors()
		term.setCursorPos(buf.x+buf.pX-1,buf.y+buf.pY-1)
	end 
end

local function menu()
	--sleep(0.5)--ghetto fix, buffer issues
	refreshMenu()
	while true do 
		local evt = {coroutine.yield()}
		if evt[1] == "timer" then 
			refreshClock()
			resetColors()
		elseif evt[1] == "appSpawned" then 
			--we have to update the menu due it needing to move
			refreshTasks()
			refreshDrpDwns()
			resetColors()
		elseif evt[1] == "appDied" and osStuff.returnLegacyActive() == evt[2] then 
			osStuff.legacyMakeActive("Files.exe_desktopApp")
			refreshMenu()
			local buf = osStuff.getOriBuffer(osStuff.returnLegacyActive())
			buf = buf or {}
			term.setCursorPos((buf.x or 1)+(buf.pX or 1)-1,(buf.y or 1)+(buf.pY or 1)-1)
			resetColors()
			
		elseif evt[1]=="refreshMenu" then 
			refreshMenu()
		elseif evt[1] == "menu_update" then 
			refreshDrpDwns()
			resetColors()
		elseif evt[1]=="makeLegAct" then 
			game.l"yeLeg"
			clScrn()
			osStuff.legacyMakeActive(evt[2] or "Files.exe_desktopApp")
			
			act()
		elseif evt[1] == "key" then 
			--osStuff.spawnApp("app",function() while true do sleep(0) end end, colors.black,colors.white,"a")
		elseif evt[1]=="mouse_click" or evt[1]=="mouse_drag" then
			local _,pressed = game.checkButtons(tsks,evt)
			if pressed then 
				if evt[2]==3 then
					if pressed ~=1 and evt[1]~="mouse_drag" then 
						game.l("Killing routine "..pressed)
						osStuff.killRoutine(ori[pressed])
						os.queueEvent"appKilled"
						coroutine.yield"appKilled"
						props,ori = osStuff.returnTaskstuffs()
						osStuff.legacyMakeActive("Files.exe_desktopApp")
						refreshMenu()
						local buf = osStuff.getOriBuffer(osStuff.returnLegacyActive())
						buf = buf or {}
						term.setCursorPos((buf.x or 1)+(buf.pX or 1)-1,(buf.y or 1)+(buf.pY or 1)-1)
						resetColors()
					end 
				else 
					clScrn()
					--game.l("~~ "..pressed.." + "..ori[pressed])
					osStuff.legacyMakeActive(ori[pressed])
					act()
				end 
			end 
		elseif evt[1]=="char" and evt[2]=="\\" then --temp
			shell.run'library/api/nokernel.lua'--temp
			local buf = osStuff.getOriBuffer(osStuff.returnLegacyActive())
			buf.newNozone(2,25,2,14)
			osStuff.menuBar()
		end 
	end 
end 
osStuff.newDaemon(menu,"menu")
osStuff.makeActive("menud")
local realname
if osStuff.settings.desktop.isCommandPrompt then 
	realname = osStuff.spawnApp("Files.exe_desktop",loadfile("desktop/Term.exe/main.lua"),colors.blue,colors.black,"D",true,{"desktop/"})
else 
	realname = osStuff.spawnApp("Files.exe_desktop",loadfile("desktop/Files.exe/main.lua"),colors.blue,colors.black,"D",true,{"-desktop","desktop/"})
end 
osStuff.legacyMakeActive("Files.exe_desktopApp")
osStuff.killRoutine(osStuff.returnMyName())

while true do coroutine.yield() end --hang the term, just in case 
--[[
			|
			|
			|
			O
		   -|-  < Term
		   / \ 
]]
























































































