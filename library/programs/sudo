--By Jackson McNeill, with inspiration from the Unix command
local args= {...}
local args = {...}
if not args[1] then 
  print(osStuff.g("sudoUsage"))
  return 
end 
local before = args[1]
args[1]="/"..(shell.resolveProgram(args[1]) or "")
if (not fs.exists(args[1])) or fs.isDir(args[1]) then 
  printError(before.." does not exist or was a directory!")
  return 
end 
term.write"Password: "
local pass = read"*"
local f = osStuff.open(args[1],"r",pass)
if not f then 
	printError("You do not have permission to access "..args[1].."!\nIf you are an administrator, change this with medit.")
	return 
elseif f == "w" then 
	printError"Incorrect password!"
	return 
end 
local program = f.readAll()
f.close()
--Load the file as a function 
program = loadstring(program)
if type(program) == "function" then 
	-- Create a table containing old fs values
	local oldfs = {}
	for key,value in pairs(fs) do 
		oldfs[key] = value 
	end 
	-- We override shell.getRunningProgram so 
	local grp = shell.getRunningPrograg
	function fs.open(a,b)
		return osStuff.open(a,b,pass)
	end 
	function fs.copy(a,b)
		local f =osStuff.open(a,"r",pass)
		if f then 
			a=f.readAll()
			f.close()
		else 
			error"Permission Denied/doesn't exist"
		end 
		f = osStuff.open(b,"w",pass)
		if f then 
			f.write(a)
			f.close()
		else 
			error"Permission Denied"
		end 
	end 
	function fs.move(a,b)
		local f =osStuff.open(a,"r",pass)
		local p
		if f then 
			p=f.readAll()
			f.close()
		else 
			error"Permission Denied/doesn't exist"
		end 
		osStuff.delete(a,pass)
		f = osStuff.open(b,"w",pass)
		if f then 
			f.write(p)
			f.close()
		else
			error"Permission Denied"
		end 
	end 
	function fs.delete(a)
		return osStuff.delete(a,pass)
	end 
	function shell.getRunningProgram() return shell.resolveProgram(args[1]) end 
	fs.isReadOnly = osStuff.sudoReadOnly
	--[[function env.loadfile(path)
		print"loadfile"
		local file = env.fs.open(path,"r")
		local prog
		if file then 
			prog = file.readAll()
			file.close()
			return loadstring(prog)
		end 
	end 
	function env.dofile(file)
		local prog = env.loadfile(file)
		return prog() 
	end ]]
	--[[local env = getfenv()
	setfenv(program,env)]]
	osStuff.isSudo = true
	local ok,err = pcall(program, unpack(args, 2) )
	if not ok then 
		printError(err)
	end 
	for key,value in pairs(oldfs) do 
		fs[key] = value 
	end 
else 
	printError(program)
end 
osStuff.isSudo = nil
