--  ¥
--load game-engine
local ospe=os.pullEvent
os.pullEvent = coroutine.yield
os.loadAPI"/Game-Engine/redirect"
os.loadAPI"/Game-Engine/game"
os.loadAPI"/library/buffer"
function restore() --do something more effecient than this eventually
	os.pullEvent = ospe 
end 
osStuff.settings = {}
osStuff.settings.useAsciiPointer = false  --I'm currently having issues with the ascii pointer, for now this has to be off, but on the official release I will be sure to fix it. It doesn't look right without it.
osStuff.settings.capDirs = true 
osStuff.settings.useDash = true
local args={...}
--no terminate


--code
if args[1] == "nosplash" then 
	osStuff.spashes = {""}
else 
	osStuff.splashes ={"The cake is a lie!","Possibly the first OS with a GUI not to boot to it.",";;","SPLASH!","Top-level coroutine!","TwoOS!","startx... why not starty?","","This text is hard to re\-\-\- nevermind...","New\nline.","I like to put a little coffee in my tea---I mean---ugggh, screwed up that joke.","I like to put a little chocolate in my mil---FFFFFFFFF","The cow goes \"Man, living here for free is great!\"","for i=1,100 do \n  print\"I will not use code in class\"\nend","Out of jokes. ","Blue!!!!","3good5you","In Soviet Russia, Waldo finds YOU!","In capatalist America, bank robs YOU!","makeYouLaugh() --> \"Lol xD\"","\n\n","Turtles and Rectangles dimension in Soup"," ","Infect! 5 days to send me money or I'll wipe the computer, but secretly I already have!","LandLua","EXTERMINATE!","They are fast. Faster than you can belive! DON'T turn your back, DON'T look away, and DON'T blink!\n... good luck.","]os[","Access Denied.","Zoom in 300%! Enhance resultion!","If there are motherboards, are there fatherboards too?","LinusCatTips is a thing...","World, Hello!","jacksonmcneill.ddns.net","Turning-complete? Well, it's almost done!",'IF POE WERE A TECHIE\n\nOnce upon a midnight dreary,\nfingers cramped and vision bleary,\nsystem manuals piled high\nand wasted paper on the floor,\nlonging for the warmth of bed sheets,\nstill I sat there, doing spreadsheets.\n\nHaving reached the bottom line,\nI took a floppy from the drawer.\nTyping with a steady hand,\nI then invoked the "save" command\nand waited for the disk to store,\nonly this and nothing more.\n\nDeep into the monitor peering,\nlong I sat there wond\'ring, fearing\nwhile the disk kept churning,\nturning yet to churn some more.\n"Save!" I said, "You cursed mother!\nSave my data from before!"\n\nOne thing did the phosphors answer\nonly this and nothing more, just,\n "Abort, Retry, Ignore?"\nWith my fingers pale and trembling,\nslowly toward the keyboard bending,\nlonging for a happy ending,\nhoping all would be restored,\nPraying for some guarantee,\ntimidly I pressed a key.\nBut on the screen there still persisted,\nwords appearing as before.\nGhastly grim they blinked and taunted,\nhaunted, as my patience wore, saying,\n"Abort, Retry, Ignore?"\n\nThere I sat, distraught, exhausted;\nby my own machine accosted.\nGetting up, I turned away,\nand paced across the office poor.\nAnd then I saw a dreadful sight:\na lightning bolt cut through the night.\n\nA gasp of horror overtook me,\nshook me to my very core.\nThe lightning zapped my previous data,\nlost and gone forevermore. Not even,\n"Abort, Retry, Ignore?"\n',"They told me I can't; so therefore I will.","A foo walked into a bar, took a look arround, and said, \"Hello, World!\""}--they can't control this from code anyway
end
if term.usingNoColor then 
	print"Note - You do not need to use nocolor to run this OS. It natively supports basic computers."
	sleep(10)
	print"Here's access to the CraftOS shell so you can remove it."
	shell.run'/rom/programs/shell'
elseif term.isColor() then 
	osStuff.backColor = colors.black
	osStuff.textColor=colors.lime
	osStuff.promptColor=colors.yellow
	osStuff.commandColor=colors.blue
	osStuff.dirColor = colors.green
	osStuff.clearBorderColor = colors.lightGray
	osStuff.errorColor = colors.red
else
	osStuff.backColor = colors.white
	osStuff.textColor = colors.black 
	osStuff.promptColor = colors.black 
	osStuff.commandColor = colors.black 
	osStuff.dirColor = colors.black
	osStuff.clearBorderColor = colors.black
	osStuff.errorColor = colors.black
end
function osStuff.specialPrint(text,time)--fancy name printing
	text = text or ""
	time = time or 0
	for i=1,#text do
		--get the cursor y pos
		local x,y=term.getCursorPos()
		if x==1 then
			x=2
		end
		term.setCursorPos(x-1,y)
		term.setBackgroundColor(osStuff.backColor)
		term.setTextColor(osStuff.textColor)
		local writeThis = string.sub(text,i,i)
		if writeThis=="\n" then--new line
			term.setBackgroundColor(osStuff.backColor or 1)
			print" "
			--term.setCursorPos(1,y+1)
		else
			write(writeThis)
			term.setBackgroundColor(colors.white)
			write" "
			sleep(time)
		end
	end
	term.setBackgroundColor(osStuff.backColor or 1)
	local _,y=term.getCursorPos()
	term.setCursorPos(term.getCursorPos()-1,y)
	print" "
end
function osStuff.doDir()
	term.setBackgroundColor(osStuff.backColor)
	if shell.dir()=="" then else--not a dir not a problem
		term.setTextColor(osStuff.dirColor)
		local dir = shell.dir()
		if osStuff.settings.capDirs then 
			dir = string.upper(dir)
		end 
		if osStuff.settings.useDash then 
			dir = string.gsub(dir,"/"," - ")
		end 
		write(dir.." ")
		if #dir>=term.getSize()-1 then 
			print()
		end
		if osStuff.settings.useAsciiPointer then 
			local x,y = term.getCursorPos()
			term.setCursorPos(x-1,y)
		end
	end
	if osStuff.settings.useAsciiPointer then 
		term.setTextColor(osStuff.commandColor)
		write"» "
		term.setTextColor(osStuff.textColor)
	else 
		--write" "
	end
end
function osStuff.centerWrite(text)
	local _,y=term.getCursorPos()
	term.setCursorPos((term.getSize()-#text)/2,y)
	write(text)
end
function osStuff.centerPrint(text)
	osStuff.centerWrite(text)
	print()
end
function osStuff.giveFenv(program)
	local f=getfenv()
	return setfenv(program,f)
end
-- Add [os] help to the help app 
local nativeLookup = help.lookup 
local nativeTopics = help.topics
function help.lookup(topic)
	-- Favor [os] help
	help.setPath"library/help"
	local a = nativeLookup(topic)
	help.setPath"rom/help"
	local b = nativeLookup(topic)
	return a or b 
end 
function help.topics()
	--Favoring [os] help
	help.setPath"library/help"
	local a = nativeTopics()
	help.setPath"rom/help"
	local b = nativeTopics() 
	for i,o in pairs(a) do 
		table.insert(b,i,o)
	end 
	return b
end 
-- Coroutine Managment functions
local routines = {}
local buffers = {}
local requests = {}
local protected = {"main",}
local active
function osStuff.newRoutine(name,funct,bSizex,bSizey)
	if routines[name] then 
		return false,1
	end 
	routines[name] = coroutine.create(funct)
	if (not bSizex) or (not bSizey) then 
		local bSizex,bSizey = term.getSize()
		bSizey=bSizey-1 
	end 
	local a = term.current()
	buffers[name] = buffer.newBuf(bSizex,bSizey)
	--first run 
	term.redirect(buffers[name])
	local _ 
	_,requests[name]=coroutine.resume(routines[name])
	term.redirect(a)
	return true 
end 
function osStuff.killRoutine(name)
	for i=1,#protected do 
		if name==protected[i] then 
			return false,1 
		end 
	end 
	routines[name] = nil
	buffers[name] = nil
	return true
end 
function osStuff.getBuffer(name)
	for i=1,#protected do 
		if name==protected[i] then 
			return false,1 
		end 
	end 
	return buffers[name] 
end 
function osStuff.getRoutineStatus(name)
	return coroutine.status(routines[name]) 
end
function osStuff.listRoutines()
	local a = {}
	for i,o in pairs(routines) do 
		table.insert(a,i)
	end 
	return a 
end 
function osStuff.makeRoutineActive(name,x,y)
	x,y=x or 1,y or 1
	for i=1,#protected do 
		if name==protected[i] then 
			return false,1 
		end 
	end 
	local a = term.current()
	--make last one no longer active
	if active then 
		buffers[active].makeInactive()
	end
	--term.redirect(buffers[name])
	--local native = term.current()
	--function buffers[name].
	buffers[name].makeActive(x,y)
	--buffers[name].isActive = true
	--test
	
	--print'Hello,World!'
	--term.redirect(a)
	active = name 
end 
local foucusedEvents = {"key","char","mouse_click","mouse_drag","mouse_scroll",}
function osStuff.initRoutines()
	osStuff.xStarted = true 
	local cT = term.current()
	while true do 
		local a = {os.pullEvent()} -- Change to coroutine.yield
		term.redirect(cT)
		--buffers[active].blit(1,1)
		for i=1,#protected do 
			if routines[protected[i]] then 
				coroutine.resume(routines[protected[i]])
			end 
		end 
		-- User stuff:
		if a[1]=="mouse_click" or a[1]=="mouse_drag" or a[1]=="mouse_scroll" then 
			a[4]=a[4]-1
		end 
		for i,o in pairs(routines) do 
			game.l(i.."s "..coroutine.status(routines[i]))
			if coroutine.status(routines[active]) == "dead" then 
				--the active routine is dead!
			end 
			if i~=protected[i] and coroutine.status(routines[i]) == "suspended" then 
				--term.redirect(cT)
				--game.l(textutils.serialize(buffers[i]))
				term.redirect(buffers[i]) --------
				game.l("a: "..active)
				if active == i then 
					game.l('1 '..(tostring(requests[i]) or ""))
					if a[1]==(requests[i] or a[1]) then 
						--print"r"
						local _
						game.l("Resuming routine: "..active)
						_,requests[i] = coroutine.resume(routines[i],unpack(a))
						game.l(tostring(_))
						--print(requests[i])
					end 
				else 
					--go through events that need focous to recieve
					local bad
					local _
					for q,w in pairs(foucusedEvents) do 
						if a[1]==w then 
							bad = true 
						end 
					end 
					if not bad then 
						_,requests[i]=coroutine.resume(routines[i],unpack(a))
						game.l(tostring(_))
					end 
				end 
			end 
		end 
	end 
end 
--lang system:
local lang={}
--run the language file 
local b = fs.open('/library/lang/def',"r")
local c 
if b then 
	c = b.readAll()
	b.close()
end
local a = loadfile("/library/lang/"..(c or ""))
if a then 
	setfenv(a,lang)
	pcall(a)
else 
	print"\nWarning: Language file is missing or has errors. The OS will look very weird."
	--sleep(4)
end 
function osStuff.g(a)
	return lang[a] or a
end
function osStuff.switchLanguage(newLang)
	local a = fs.open('/library/lang/def',"w")
	a.write(newLang)
	a.close()
end 




------------------------------
--[[~~~Clipboard System~~~]]--
------------------------------
local clipboardStuff 
function osStuff.copyToClipboard(a) 
	if type(a) == "string" then 
		a = {a}
	end 
	clipboardStuff = a 
end 
function osStuff.getClipboard(a)
	return clipboardStuff 
end 

--[[Term fix :
function term.clearLine(l) 
	l= l or term.getCursorPos()
	local white = ""
	for i=1,term.getSize() do 
		white = white.." "
	end 
	local x,y = term.getCursorPos()
	--term.setBackgroundColor(colors.black)
	term.setCursorPos(1,l)
	print(white)
	term.setCursorPos(x,y)
end 
--]]
--A commonly used function:
function osStuff.prgName(path)
  string.gsub(path,"/","\\")
  local a
  while true do 
    a=string.find(path,"/")
    if not a then 
      break
    end 
    path = string.sub( path, a+1, #path )
  end 
  return path 
end 
function term.native()--don't let them bypass a buffer api
	return term.current()
end 

--Overwiting printerror to use our colorscheme 
function printError(txt)
	term.setTextColor(osStuff.errorColor)
	print(txt)
	term.setTextColor(osStuff.textColor)
end 




--settings
if fs.exists"/library/settings" then 
	shell.run"/library/settings"
end 
